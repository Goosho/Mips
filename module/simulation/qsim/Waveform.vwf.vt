// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/26/2019 15:28:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    module
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module module_vlg_sample_tst(
	fpga_clk,
	sampler_tx
);
input  fpga_clk;
output sampler_tx;

reg sample;
time current_time;
always @(fpga_clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module module_vlg_check_tst (
	alu,
	inst,
	sampler_rx
);
input [31:0] alu;
input [31:0] inst;
input sampler_rx;

reg [31:0] alu_expected;
reg [31:0] inst_expected;

reg [31:0] alu_prev;
reg [31:0] inst_prev;

reg [31:0] alu_expected_prev;
reg [31:0] inst_expected_prev;

reg [31:0] last_alu_exp;
reg [31:0] last_inst_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	alu_prev = alu;
	inst_prev = inst;
end

// update expected /o prevs

always @(trigger)
begin
	alu_expected_prev = alu_expected;
	inst_expected_prev = inst_expected;
end


// expected alu[ 31 ]
initial
begin
	alu_expected[31] = 1'bX;
end 
// expected alu[ 30 ]
initial
begin
	alu_expected[30] = 1'bX;
end 
// expected alu[ 29 ]
initial
begin
	alu_expected[29] = 1'bX;
end 
// expected alu[ 28 ]
initial
begin
	alu_expected[28] = 1'bX;
end 
// expected alu[ 27 ]
initial
begin
	alu_expected[27] = 1'bX;
end 
// expected alu[ 26 ]
initial
begin
	alu_expected[26] = 1'bX;
end 
// expected alu[ 25 ]
initial
begin
	alu_expected[25] = 1'bX;
end 
// expected alu[ 24 ]
initial
begin
	alu_expected[24] = 1'bX;
end 
// expected alu[ 23 ]
initial
begin
	alu_expected[23] = 1'bX;
end 
// expected alu[ 22 ]
initial
begin
	alu_expected[22] = 1'bX;
end 
// expected alu[ 21 ]
initial
begin
	alu_expected[21] = 1'bX;
end 
// expected alu[ 20 ]
initial
begin
	alu_expected[20] = 1'bX;
end 
// expected alu[ 19 ]
initial
begin
	alu_expected[19] = 1'bX;
end 
// expected alu[ 18 ]
initial
begin
	alu_expected[18] = 1'bX;
end 
// expected alu[ 17 ]
initial
begin
	alu_expected[17] = 1'bX;
end 
// expected alu[ 16 ]
initial
begin
	alu_expected[16] = 1'bX;
end 
// expected alu[ 15 ]
initial
begin
	alu_expected[15] = 1'bX;
end 
// expected alu[ 14 ]
initial
begin
	alu_expected[14] = 1'bX;
end 
// expected alu[ 13 ]
initial
begin
	alu_expected[13] = 1'bX;
end 
// expected alu[ 12 ]
initial
begin
	alu_expected[12] = 1'bX;
end 
// expected alu[ 11 ]
initial
begin
	alu_expected[11] = 1'bX;
end 
// expected alu[ 10 ]
initial
begin
	alu_expected[10] = 1'bX;
end 
// expected alu[ 9 ]
initial
begin
	alu_expected[9] = 1'bX;
end 
// expected alu[ 8 ]
initial
begin
	alu_expected[8] = 1'bX;
end 
// expected alu[ 7 ]
initial
begin
	alu_expected[7] = 1'bX;
end 
// expected alu[ 6 ]
initial
begin
	alu_expected[6] = 1'bX;
end 
// expected alu[ 5 ]
initial
begin
	alu_expected[5] = 1'bX;
end 
// expected alu[ 4 ]
initial
begin
	alu_expected[4] = 1'bX;
end 
// expected alu[ 3 ]
initial
begin
	alu_expected[3] = 1'bX;
end 
// expected alu[ 2 ]
initial
begin
	alu_expected[2] = 1'bX;
end 
// expected alu[ 1 ]
initial
begin
	alu_expected[1] = 1'bX;
end 
// expected alu[ 0 ]
initial
begin
	alu_expected[0] = 1'bX;
end 
// expected inst[ 31 ]
initial
begin
	inst_expected[31] = 1'bX;
end 
// expected inst[ 30 ]
initial
begin
	inst_expected[30] = 1'bX;
end 
// expected inst[ 29 ]
initial
begin
	inst_expected[29] = 1'bX;
end 
// expected inst[ 28 ]
initial
begin
	inst_expected[28] = 1'bX;
end 
// expected inst[ 27 ]
initial
begin
	inst_expected[27] = 1'bX;
end 
// expected inst[ 26 ]
initial
begin
	inst_expected[26] = 1'bX;
end 
// expected inst[ 25 ]
initial
begin
	inst_expected[25] = 1'bX;
end 
// expected inst[ 24 ]
initial
begin
	inst_expected[24] = 1'bX;
end 
// expected inst[ 23 ]
initial
begin
	inst_expected[23] = 1'bX;
end 
// expected inst[ 22 ]
initial
begin
	inst_expected[22] = 1'bX;
end 
// expected inst[ 21 ]
initial
begin
	inst_expected[21] = 1'bX;
end 
// expected inst[ 20 ]
initial
begin
	inst_expected[20] = 1'bX;
end 
// expected inst[ 19 ]
initial
begin
	inst_expected[19] = 1'bX;
end 
// expected inst[ 18 ]
initial
begin
	inst_expected[18] = 1'bX;
end 
// expected inst[ 17 ]
initial
begin
	inst_expected[17] = 1'bX;
end 
// expected inst[ 16 ]
initial
begin
	inst_expected[16] = 1'bX;
end 
// expected inst[ 15 ]
initial
begin
	inst_expected[15] = 1'bX;
end 
// expected inst[ 14 ]
initial
begin
	inst_expected[14] = 1'bX;
end 
// expected inst[ 13 ]
initial
begin
	inst_expected[13] = 1'bX;
end 
// expected inst[ 12 ]
initial
begin
	inst_expected[12] = 1'bX;
end 
// expected inst[ 11 ]
initial
begin
	inst_expected[11] = 1'bX;
end 
// expected inst[ 10 ]
initial
begin
	inst_expected[10] = 1'bX;
end 
// expected inst[ 9 ]
initial
begin
	inst_expected[9] = 1'bX;
end 
// expected inst[ 8 ]
initial
begin
	inst_expected[8] = 1'bX;
end 
// expected inst[ 7 ]
initial
begin
	inst_expected[7] = 1'bX;
end 
// expected inst[ 6 ]
initial
begin
	inst_expected[6] = 1'bX;
end 
// expected inst[ 5 ]
initial
begin
	inst_expected[5] = 1'bX;
end 
// expected inst[ 4 ]
initial
begin
	inst_expected[4] = 1'bX;
end 
// expected inst[ 3 ]
initial
begin
	inst_expected[3] = 1'bX;
end 
// expected inst[ 2 ]
initial
begin
	inst_expected[2] = 1'bX;
end 
// expected inst[ 1 ]
initial
begin
	inst_expected[1] = 1'bX;
end 
// expected inst[ 0 ]
initial
begin
	inst_expected[0] = 1'bX;
end 
// generate trigger
always @(alu_expected or alu or inst_expected or inst)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alu = %b | expected inst = %b | ",alu_expected_prev,inst_expected_prev);
	$display("| real alu = %b | real inst = %b | ",alu_prev,inst_prev);
`endif
	if (
		( alu_expected_prev[0] !== 1'bx ) && ( alu_prev[0] !== alu_expected_prev[0] )
		&& ((alu_expected_prev[0] !== last_alu_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[0] = alu_expected_prev[0];
	end
	if (
		( alu_expected_prev[1] !== 1'bx ) && ( alu_prev[1] !== alu_expected_prev[1] )
		&& ((alu_expected_prev[1] !== last_alu_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[1] = alu_expected_prev[1];
	end
	if (
		( alu_expected_prev[2] !== 1'bx ) && ( alu_prev[2] !== alu_expected_prev[2] )
		&& ((alu_expected_prev[2] !== last_alu_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[2] = alu_expected_prev[2];
	end
	if (
		( alu_expected_prev[3] !== 1'bx ) && ( alu_prev[3] !== alu_expected_prev[3] )
		&& ((alu_expected_prev[3] !== last_alu_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[3] = alu_expected_prev[3];
	end
	if (
		( alu_expected_prev[4] !== 1'bx ) && ( alu_prev[4] !== alu_expected_prev[4] )
		&& ((alu_expected_prev[4] !== last_alu_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[4] = alu_expected_prev[4];
	end
	if (
		( alu_expected_prev[5] !== 1'bx ) && ( alu_prev[5] !== alu_expected_prev[5] )
		&& ((alu_expected_prev[5] !== last_alu_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[5] = alu_expected_prev[5];
	end
	if (
		( alu_expected_prev[6] !== 1'bx ) && ( alu_prev[6] !== alu_expected_prev[6] )
		&& ((alu_expected_prev[6] !== last_alu_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[6] = alu_expected_prev[6];
	end
	if (
		( alu_expected_prev[7] !== 1'bx ) && ( alu_prev[7] !== alu_expected_prev[7] )
		&& ((alu_expected_prev[7] !== last_alu_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[7] = alu_expected_prev[7];
	end
	if (
		( alu_expected_prev[8] !== 1'bx ) && ( alu_prev[8] !== alu_expected_prev[8] )
		&& ((alu_expected_prev[8] !== last_alu_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[8] = alu_expected_prev[8];
	end
	if (
		( alu_expected_prev[9] !== 1'bx ) && ( alu_prev[9] !== alu_expected_prev[9] )
		&& ((alu_expected_prev[9] !== last_alu_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[9] = alu_expected_prev[9];
	end
	if (
		( alu_expected_prev[10] !== 1'bx ) && ( alu_prev[10] !== alu_expected_prev[10] )
		&& ((alu_expected_prev[10] !== last_alu_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[10] = alu_expected_prev[10];
	end
	if (
		( alu_expected_prev[11] !== 1'bx ) && ( alu_prev[11] !== alu_expected_prev[11] )
		&& ((alu_expected_prev[11] !== last_alu_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[11] = alu_expected_prev[11];
	end
	if (
		( alu_expected_prev[12] !== 1'bx ) && ( alu_prev[12] !== alu_expected_prev[12] )
		&& ((alu_expected_prev[12] !== last_alu_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[12] = alu_expected_prev[12];
	end
	if (
		( alu_expected_prev[13] !== 1'bx ) && ( alu_prev[13] !== alu_expected_prev[13] )
		&& ((alu_expected_prev[13] !== last_alu_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[13] = alu_expected_prev[13];
	end
	if (
		( alu_expected_prev[14] !== 1'bx ) && ( alu_prev[14] !== alu_expected_prev[14] )
		&& ((alu_expected_prev[14] !== last_alu_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[14] = alu_expected_prev[14];
	end
	if (
		( alu_expected_prev[15] !== 1'bx ) && ( alu_prev[15] !== alu_expected_prev[15] )
		&& ((alu_expected_prev[15] !== last_alu_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[15] = alu_expected_prev[15];
	end
	if (
		( alu_expected_prev[16] !== 1'bx ) && ( alu_prev[16] !== alu_expected_prev[16] )
		&& ((alu_expected_prev[16] !== last_alu_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[16] = alu_expected_prev[16];
	end
	if (
		( alu_expected_prev[17] !== 1'bx ) && ( alu_prev[17] !== alu_expected_prev[17] )
		&& ((alu_expected_prev[17] !== last_alu_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[17] = alu_expected_prev[17];
	end
	if (
		( alu_expected_prev[18] !== 1'bx ) && ( alu_prev[18] !== alu_expected_prev[18] )
		&& ((alu_expected_prev[18] !== last_alu_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[18] = alu_expected_prev[18];
	end
	if (
		( alu_expected_prev[19] !== 1'bx ) && ( alu_prev[19] !== alu_expected_prev[19] )
		&& ((alu_expected_prev[19] !== last_alu_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[19] = alu_expected_prev[19];
	end
	if (
		( alu_expected_prev[20] !== 1'bx ) && ( alu_prev[20] !== alu_expected_prev[20] )
		&& ((alu_expected_prev[20] !== last_alu_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[20] = alu_expected_prev[20];
	end
	if (
		( alu_expected_prev[21] !== 1'bx ) && ( alu_prev[21] !== alu_expected_prev[21] )
		&& ((alu_expected_prev[21] !== last_alu_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[21] = alu_expected_prev[21];
	end
	if (
		( alu_expected_prev[22] !== 1'bx ) && ( alu_prev[22] !== alu_expected_prev[22] )
		&& ((alu_expected_prev[22] !== last_alu_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[22] = alu_expected_prev[22];
	end
	if (
		( alu_expected_prev[23] !== 1'bx ) && ( alu_prev[23] !== alu_expected_prev[23] )
		&& ((alu_expected_prev[23] !== last_alu_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[23] = alu_expected_prev[23];
	end
	if (
		( alu_expected_prev[24] !== 1'bx ) && ( alu_prev[24] !== alu_expected_prev[24] )
		&& ((alu_expected_prev[24] !== last_alu_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[24] = alu_expected_prev[24];
	end
	if (
		( alu_expected_prev[25] !== 1'bx ) && ( alu_prev[25] !== alu_expected_prev[25] )
		&& ((alu_expected_prev[25] !== last_alu_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[25] = alu_expected_prev[25];
	end
	if (
		( alu_expected_prev[26] !== 1'bx ) && ( alu_prev[26] !== alu_expected_prev[26] )
		&& ((alu_expected_prev[26] !== last_alu_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[26] = alu_expected_prev[26];
	end
	if (
		( alu_expected_prev[27] !== 1'bx ) && ( alu_prev[27] !== alu_expected_prev[27] )
		&& ((alu_expected_prev[27] !== last_alu_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[27] = alu_expected_prev[27];
	end
	if (
		( alu_expected_prev[28] !== 1'bx ) && ( alu_prev[28] !== alu_expected_prev[28] )
		&& ((alu_expected_prev[28] !== last_alu_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[28] = alu_expected_prev[28];
	end
	if (
		( alu_expected_prev[29] !== 1'bx ) && ( alu_prev[29] !== alu_expected_prev[29] )
		&& ((alu_expected_prev[29] !== last_alu_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[29] = alu_expected_prev[29];
	end
	if (
		( alu_expected_prev[30] !== 1'bx ) && ( alu_prev[30] !== alu_expected_prev[30] )
		&& ((alu_expected_prev[30] !== last_alu_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[30] = alu_expected_prev[30];
	end
	if (
		( alu_expected_prev[31] !== 1'bx ) && ( alu_prev[31] !== alu_expected_prev[31] )
		&& ((alu_expected_prev[31] !== last_alu_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_expected_prev);
		$display ("     Real value = %b", alu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_exp[31] = alu_expected_prev[31];
	end
	if (
		( inst_expected_prev[0] !== 1'bx ) && ( inst_prev[0] !== inst_expected_prev[0] )
		&& ((inst_expected_prev[0] !== last_inst_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[0] = inst_expected_prev[0];
	end
	if (
		( inst_expected_prev[1] !== 1'bx ) && ( inst_prev[1] !== inst_expected_prev[1] )
		&& ((inst_expected_prev[1] !== last_inst_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[1] = inst_expected_prev[1];
	end
	if (
		( inst_expected_prev[2] !== 1'bx ) && ( inst_prev[2] !== inst_expected_prev[2] )
		&& ((inst_expected_prev[2] !== last_inst_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[2] = inst_expected_prev[2];
	end
	if (
		( inst_expected_prev[3] !== 1'bx ) && ( inst_prev[3] !== inst_expected_prev[3] )
		&& ((inst_expected_prev[3] !== last_inst_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[3] = inst_expected_prev[3];
	end
	if (
		( inst_expected_prev[4] !== 1'bx ) && ( inst_prev[4] !== inst_expected_prev[4] )
		&& ((inst_expected_prev[4] !== last_inst_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[4] = inst_expected_prev[4];
	end
	if (
		( inst_expected_prev[5] !== 1'bx ) && ( inst_prev[5] !== inst_expected_prev[5] )
		&& ((inst_expected_prev[5] !== last_inst_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[5] = inst_expected_prev[5];
	end
	if (
		( inst_expected_prev[6] !== 1'bx ) && ( inst_prev[6] !== inst_expected_prev[6] )
		&& ((inst_expected_prev[6] !== last_inst_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[6] = inst_expected_prev[6];
	end
	if (
		( inst_expected_prev[7] !== 1'bx ) && ( inst_prev[7] !== inst_expected_prev[7] )
		&& ((inst_expected_prev[7] !== last_inst_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[7] = inst_expected_prev[7];
	end
	if (
		( inst_expected_prev[8] !== 1'bx ) && ( inst_prev[8] !== inst_expected_prev[8] )
		&& ((inst_expected_prev[8] !== last_inst_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[8] = inst_expected_prev[8];
	end
	if (
		( inst_expected_prev[9] !== 1'bx ) && ( inst_prev[9] !== inst_expected_prev[9] )
		&& ((inst_expected_prev[9] !== last_inst_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[9] = inst_expected_prev[9];
	end
	if (
		( inst_expected_prev[10] !== 1'bx ) && ( inst_prev[10] !== inst_expected_prev[10] )
		&& ((inst_expected_prev[10] !== last_inst_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[10] = inst_expected_prev[10];
	end
	if (
		( inst_expected_prev[11] !== 1'bx ) && ( inst_prev[11] !== inst_expected_prev[11] )
		&& ((inst_expected_prev[11] !== last_inst_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[11] = inst_expected_prev[11];
	end
	if (
		( inst_expected_prev[12] !== 1'bx ) && ( inst_prev[12] !== inst_expected_prev[12] )
		&& ((inst_expected_prev[12] !== last_inst_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[12] = inst_expected_prev[12];
	end
	if (
		( inst_expected_prev[13] !== 1'bx ) && ( inst_prev[13] !== inst_expected_prev[13] )
		&& ((inst_expected_prev[13] !== last_inst_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[13] = inst_expected_prev[13];
	end
	if (
		( inst_expected_prev[14] !== 1'bx ) && ( inst_prev[14] !== inst_expected_prev[14] )
		&& ((inst_expected_prev[14] !== last_inst_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[14] = inst_expected_prev[14];
	end
	if (
		( inst_expected_prev[15] !== 1'bx ) && ( inst_prev[15] !== inst_expected_prev[15] )
		&& ((inst_expected_prev[15] !== last_inst_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[15] = inst_expected_prev[15];
	end
	if (
		( inst_expected_prev[16] !== 1'bx ) && ( inst_prev[16] !== inst_expected_prev[16] )
		&& ((inst_expected_prev[16] !== last_inst_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[16] = inst_expected_prev[16];
	end
	if (
		( inst_expected_prev[17] !== 1'bx ) && ( inst_prev[17] !== inst_expected_prev[17] )
		&& ((inst_expected_prev[17] !== last_inst_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[17] = inst_expected_prev[17];
	end
	if (
		( inst_expected_prev[18] !== 1'bx ) && ( inst_prev[18] !== inst_expected_prev[18] )
		&& ((inst_expected_prev[18] !== last_inst_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[18] = inst_expected_prev[18];
	end
	if (
		( inst_expected_prev[19] !== 1'bx ) && ( inst_prev[19] !== inst_expected_prev[19] )
		&& ((inst_expected_prev[19] !== last_inst_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[19] = inst_expected_prev[19];
	end
	if (
		( inst_expected_prev[20] !== 1'bx ) && ( inst_prev[20] !== inst_expected_prev[20] )
		&& ((inst_expected_prev[20] !== last_inst_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[20] = inst_expected_prev[20];
	end
	if (
		( inst_expected_prev[21] !== 1'bx ) && ( inst_prev[21] !== inst_expected_prev[21] )
		&& ((inst_expected_prev[21] !== last_inst_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[21] = inst_expected_prev[21];
	end
	if (
		( inst_expected_prev[22] !== 1'bx ) && ( inst_prev[22] !== inst_expected_prev[22] )
		&& ((inst_expected_prev[22] !== last_inst_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[22] = inst_expected_prev[22];
	end
	if (
		( inst_expected_prev[23] !== 1'bx ) && ( inst_prev[23] !== inst_expected_prev[23] )
		&& ((inst_expected_prev[23] !== last_inst_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[23] = inst_expected_prev[23];
	end
	if (
		( inst_expected_prev[24] !== 1'bx ) && ( inst_prev[24] !== inst_expected_prev[24] )
		&& ((inst_expected_prev[24] !== last_inst_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[24] = inst_expected_prev[24];
	end
	if (
		( inst_expected_prev[25] !== 1'bx ) && ( inst_prev[25] !== inst_expected_prev[25] )
		&& ((inst_expected_prev[25] !== last_inst_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[25] = inst_expected_prev[25];
	end
	if (
		( inst_expected_prev[26] !== 1'bx ) && ( inst_prev[26] !== inst_expected_prev[26] )
		&& ((inst_expected_prev[26] !== last_inst_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[26] = inst_expected_prev[26];
	end
	if (
		( inst_expected_prev[27] !== 1'bx ) && ( inst_prev[27] !== inst_expected_prev[27] )
		&& ((inst_expected_prev[27] !== last_inst_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[27] = inst_expected_prev[27];
	end
	if (
		( inst_expected_prev[28] !== 1'bx ) && ( inst_prev[28] !== inst_expected_prev[28] )
		&& ((inst_expected_prev[28] !== last_inst_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[28] = inst_expected_prev[28];
	end
	if (
		( inst_expected_prev[29] !== 1'bx ) && ( inst_prev[29] !== inst_expected_prev[29] )
		&& ((inst_expected_prev[29] !== last_inst_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[29] = inst_expected_prev[29];
	end
	if (
		( inst_expected_prev[30] !== 1'bx ) && ( inst_prev[30] !== inst_expected_prev[30] )
		&& ((inst_expected_prev[30] !== last_inst_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[30] = inst_expected_prev[30];
	end
	if (
		( inst_expected_prev[31] !== 1'bx ) && ( inst_prev[31] !== inst_expected_prev[31] )
		&& ((inst_expected_prev[31] !== last_inst_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_expected_prev);
		$display ("     Real value = %b", inst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_inst_exp[31] = inst_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module module_vlg_vec_tst();
// constants                                           
// general purpose registers
reg fpga_clk;
// wires                                               
wire [31:0] alu;
wire [31:0] inst;

wire sampler;                             

// assign statements (if any)                          
module i1 (
// port map - connection between master ports and signals/registers   
	.alu(alu),
	.fpga_clk(fpga_clk),
	.inst(inst)
);

// fpga_clk
initial
begin
	fpga_clk = 1'b0;
end 

module_vlg_sample_tst tb_sample (
	.fpga_clk(fpga_clk),
	.sampler_tx(sampler)
);

module_vlg_check_tst tb_out(
	.alu(alu),
	.inst(inst),
	.sampler_rx(sampler)
);
endmodule

